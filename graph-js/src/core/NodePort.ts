import { v4 as uuidv4 } from "uuid";
import { Size } from "../data/Size";
import { Vector } from "../data/Vector";

export enum PortAttachment {
    None = 0,
    North = 1,
    East = 2,
    South = 3,
    West = 4,
    Free = 5,
}

export interface NodePort {
    id: string | ""; // Empty string = generated by default.
    attachment: PortAttachment;
    offset?: number | string; // E.g. -15 or "45%".
    position?: Vector;
    normal?: Vector;
}

export interface NodePorts {
    [portId: string]: NodePort;
}

function alignPorts(ports: NodePort[], attachment: PortAttachment): void {
    const foundPorts = ports.filter((port) => {
        return port.attachment === attachment && port.offset === undefined;
    });

    if (foundPorts.length <= 0) {
        return;
    }

    let normal: Vector;
    switch (attachment) {
        case PortAttachment.North:
            normal = new Vector(0.0, -1.0);
            break;
        case PortAttachment.East:
            normal = new Vector(1.0, 0.0);
            break;
        case PortAttachment.South:
            normal = new Vector(0.0, 1.0);
            break;
        case PortAttachment.West:
            normal = new Vector(-1.0, 0.0);
            break;
    }

    foundPorts.forEach((port, index) => {
        port.offset = `${index / (foundPorts.length + 1)}%`;
        port.normal = normal;
    });
}

export function initializePorts(ports: NodePort[]): void {
    // Assign 'id' to ports without one.
    ports.forEach((port) => {
        port.id = port.id ?? `port-${uuidv4()}`;
    });

    // Distribute ports along each side of the node.
    alignPorts(ports, PortAttachment.North);
    alignPorts(ports, PortAttachment.East);
    alignPorts(ports, PortAttachment.South);
    alignPorts(ports, PortAttachment.West);
}

export function positionNodePorts(ports: NodePort[], nodeSize: Size): void {
    ports
        .filter((port) => "string" === typeof port.offset)
        .forEach((port) => {
            let x = 0;
            let y = 0;
            const percentage = parseFloat(port.offset as string) / 100.0;

            if (port.attachment === PortAttachment.North) {
                x = percentage * nodeSize.width;
            } else if (port.attachment === PortAttachment.South) {
                x = percentage * nodeSize.width;
                y = nodeSize.height;
            } else if (port.attachment === PortAttachment.East) {
                x = nodeSize.width;
                y = percentage * nodeSize.height;
            } else if (port.attachment === PortAttachment.West) {
                y = percentage * nodeSize.height;
            }

            port.position = new Vector(x, y);
        });
}
